
when an image changes it may break backwards compatibility of
cyber-dojo.sh for existing exercises. Images need to be tagged with
${SHA:0:7} like services. But this tag needs to end up in start_point/manifest.json
The sha depends on the commit, and if the image tag is hand written into
manifest.json it will come _before_ the commit. So...
  1) the image is tagged with ${SHA:0:7}
  2) the image tag has to get into the manifest in a post-commit automated way

How are start-point images created...
$ cyber-dojo start-point create --languages <NAME> <REPO_URL>...
This runs commander/app/sh/start-point-create.sh which git clones
each repo and stores the commit of its head into a shas.txt like this
  echo -e "${URL_INDEX} \t ${sha} \t ${url}" >> "${CONTEXT_DIR}/shas.txt"
where URL_INDEX is a simple incrementing integer.

Make each dir got its own sha.txt file (repo url too):
  echo ${sha} > "${CONTEXT_DIR}/${URL_INDEX}/start_point/sha.txt
  echo ${url} > "${CONTEXT_DIR}/${URL_INDEX}/start_point/url.txt

The cloned repos are COPY'd into the image and the start-points-base image
has CMD [ "./up.sh" ] which runs a rack-dispatcher. That uses starter.rb
which has a read_manifests() method.
1) That could tweak the image_name in each manifest from its sha.txt file...
     sha = IO.read("#{dir}/sha.txt")
     tag = sha[0...7]
     manifest['image_name'] += ":#{tag}"
     manifest['url'] = IO.read("#{dir}/url.txt").strip
2) image_build_test_push_notify.sh (the LTF build script) needs to tag the image.
   Its in cyber-dojo-tools/image_builder. See push_cdl_image_to_dockerhub()
   towards the end.
     sha="${CIRCLE_SHA1}"
     tag="${sha:0:7}"
     docker tag $(image_name) $(image_name):${tag}
     echo "${DOCKER_PASSWORD}" | docker login --username "${DOCKER_USERNAME}" --password-stdin
     docker push $(image_name):${tag}
   However, the tag will have to happen even if you are not on CI.
   It has to work on a local dev loop.

TODO: Do I still need a :latest tag to be pushed?
TODO: Does puller need a :latest tag?
