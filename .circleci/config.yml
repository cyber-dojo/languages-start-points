version: 2
jobs:
  build-image:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Build tested docker images
          command: |
            set -e
            ./pipe_build_up_test.sh
      - run:
          name: Tag docker images
          command: |
            set -e
            IMAGE=cyberdojo/languages-start-points-all
            docker tag ${IMAGE}:latest ${IMAGE}:${CIRCLE_SHA1:0:7}
            IMAGE=cyberdojo/languages-start-points-common
            docker tag ${IMAGE}:latest ${IMAGE}:${CIRCLE_SHA1:0:7}
            IMAGE=cyberdojo/languages-start-points-small
            docker tag ${IMAGE}:latest ${IMAGE}:${CIRCLE_SHA1:0:7}

      - run:
          name: Publish tagged docker images on dockerhub
          command: |
            set -e
            echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
            #
            IMAGE=cyberdojo/languages-start-points-all
            docker push ${IMAGE}:${CIRCLE_SHA1:0:7}
            docker push ${IMAGE}:latest
            #
            IMAGE=cyberdojo/languages-start-points-common
            docker push ${IMAGE}:${CIRCLE_SHA1:0:7}
            docker push ${IMAGE}:latest
            #
            IMAGE=cyberdojo/languages-start-points-small
            echo "${DOCKER_PASS}" | docker login -u "${DOCKER_USER}" --password-stdin
            docker push ${IMAGE}:${CIRCLE_SHA1:0:7}
            docker push ${IMAGE}:latest
            #
            docker logout

  deploy-to-beta:
    docker:
      - image: cyberdojo/gcloud-kubectl-helm
    steps:
      - checkout
      - run:
          name: Authenticate with gcloud, deploy with helm to beta
          command: ./.circleci/deploy_to_namespace.sh beta

  deploy-to-prod:
    docker:
      - image: cyberdojo/gcloud-kubectl-helm
    steps:
      - checkout
      - run:
          name: Authenticate with gcloud and deploy with helm
          command: ./.circleci/deploy_to_namespace.sh prod

workflows:
  version: 2
  build:
    jobs:
      - build-image:
          context: cyberdojo-context
          filters:
            branches:
              only: [ master ]
      - deploy-to-beta:
          context: cyberdojo-context
          requires: [ build-image ]
      - approve-to-prod:
          type: approval
          requires: [ deploy-to-beta ]
      - deploy-to-prod:
          context: cyberdojo-context
          requires: [ approve-to-prod ]
